'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _d3 = require('d3');

var _d32 = _interopRequireDefault(_d3);

var defaultThickness = 4;

var Plotter = (function () {
  function Plotter(_ref) {
    var _ref$selector = _ref.selector;
    var selector = _ref$selector === undefined ? 'body' : _ref$selector;
    var _ref$thickness = _ref.thickness;
    var thickness = _ref$thickness === undefined ? defaultThickness : _ref$thickness;

    _classCallCheck(this, Plotter);

    _Object$assign(this, { selector: selector, thickness: thickness });
  }

  _createClass(Plotter, [{
    key: 'addPath',
    value: function addPath(fn) {
      this.d3Container = _d32['default'].select(this.selector);

      // render in a square SVG, adjust margins to center
      var width = this.d3Container[0][0].getBoundingClientRect().width;
      var height = this.d3Container[0][0].getBoundingClientRect().height;
      var marginOffset = Math.abs((width - height) / 2);
      var marginToAdjust = width > height ? 'margin-left' : 'margin-top';
      this.size = Math.min(width, height);

      var size = this.size;
      var thickness = this.thickness;

      var svgContainer = this.d3Container.append('svg').attr('width', size).attr('height', size).attr('style', marginToAdjust + ': ' + marginOffset + 'px');

      svgContainer.append('path').attr('d', this.getLineFunction(fn)([].concat(_toConsumableArray(new Array(Math.round(size)))).map(function (_, i) {
        return i;
      }))).attr('stroke', 'blue').attr('stroke-width', thickness).attr('fill', 'none');
    }
  }, {
    key: 'updatePath',
    value: function updatePath(fn) {
      var size = this.size;
      var thickness = this.thickness;

      var svgContainer = this.d3Container.transition();

      svgContainer.select('path').attr('d', this.getLineFunction(fn)([].concat(_toConsumableArray(new Array(Math.round(size)))).map(function (_, i) {
        return i;
      })));
    }
  }, {
    key: 'getLineFunction',
    value: function getLineFunction(fn) {
      var size = this.size;
      var thickness = this.thickness;

      return _d32['default'].svg.line().x(function (i) {
        return i;
      }).y(function (i) {
        return size - thickness / 2 - size * fn(i / size) * (1 - thickness / size);
      }).interpolate('linear');
    }
  }]);

  return Plotter;
})();

exports['default'] = Plotter;
module.exports = exports['default'];